# core/formatter.py
"""
Sistema de formata√ß√£o de respostas em m√∫ltiplas mensagens curtas
‚úÖ CORRIGIDO: WhatsApp nativo + prote√ß√£o completa contra markdown
"""

import re
from typing import List, Dict, Any, Optional
from dataclasses import dataclass

@dataclass
class FormatterConfig:
    """Configura√ß√£o de formata√ß√£o por tenant"""
    max_chars: int = 200
    use_emojis: bool = True
    greeting_style: str = "friendly"  # formal, friendly, casual
    list_style: str = "numbered"  # numbered, bullets, plain
    separator_style: str = "natural"  # natural, structured
    whatsapp_formatting: bool = True  # ‚úÖ Usa formata√ß√£o WhatsApp
    clean_text_mode: bool = False     # ‚úÖ Se True, remove toda formata√ß√£o
    
    @classmethod
    def from_dict(cls, config: Dict[str, Any]) -> 'FormatterConfig':
        return cls(**{k: v for k, v in config.items() if k in cls.__annotations__})


class MessageFormatter:
    """Formata respostas longas em m√∫ltiplas mensagens curtas"""
    
    def __init__(self, config: FormatterConfig = None):
        self.config = config or FormatterConfig()
    
    def format_response(self, response: str, context: Dict[str, Any] = None) -> List[str]:
        """
        Formata uma resposta longa em m√∫ltiplas mensagens curtas
        """
        # Prote√ß√£o contra response vazio
        if not response or not response.strip():
            fallback = "Desculpe, n√£o consegui gerar uma resposta. Pode reformular sua pergunta?"
            return [fallback]
        
        # ‚úÖ CR√çTICO: Converte markdown para WhatsApp ANTES de tudo
        response = self._convert_markdown_to_whatsapp(response)
        
        # Detecta tipo de conte√∫do
        content_type = self._detect_content_type(response)
        
        if content_type == "structured_list":
            return self._format_structured_list(response)
        elif content_type == "explanation":
            return self._format_explanation(response)
        elif content_type == "conversation":
            return self._format_conversation(response)
        else:
            return self._format_generic(response)
    
    def _convert_markdown_to_whatsapp(self, text: str) -> str:
        """‚úÖ CR√çTICO: Converte/remove formata√ß√£o para WhatsApp"""
        
        # Modo texto completamente limpo
        if self.config.clean_text_mode:
            # Remove TODOS os markdowns
            text = re.sub(r'\*\*(.*?)\*\*', r'\1', text)  # Remove **bold**
            text = re.sub(r'\*(.*?)\*', r'\1', text)      # Remove *italic*
            text = re.sub(r'`([^`]+)`', r'\1', text)      # Remove `code`
            text = re.sub(r'^#{1,6}\s+', '', text, flags=re.MULTILINE)  # Remove headers
            text = re.sub(r'^\s*[-*+]\s+', '', text, flags=re.MULTILINE)  # Remove bullets
            text = re.sub(r'^\s*\d+\.\s*', '', text, flags=re.MULTILINE)  # Remove numera√ß√£o
            return text
        
        # Formata√ß√£o WhatsApp nativa
        if self.config.whatsapp_formatting:
            # ‚úÖ CORRE√á√ÉO CR√çTICA: Converte **bold** para *bold* (WhatsApp)
            text = re.sub(r'\*\*(.*?)\*\*', r'*\1*', text)
            
            # Remove headers markdown completamente
            text = re.sub(r'^#{1,6}\s+', '', text, flags=re.MULTILINE)
            
            # Converte listas markdown para formato simples
            text = re.sub(r'^\s*[-*+]\s+', '‚Ä¢ ', text, flags=re.MULTILINE)
            
            # Remove c√≥digo inline desnecess√°rio
            text = re.sub(r'`([^`]+)`', r'\1', text)
            
            # ‚úÖ NOVO: Remove formata√ß√£o de tabelas
            text = re.sub(r'\|.*?\|', '', text, flags=re.MULTILINE)
            
            # ‚úÖ NOVO: Limpa espa√ßos extras ap√≥s convers√µes
            text = re.sub(r'\n\n+', '\n\n', text)
            text = re.sub(r'\s+', ' ', text)
        
        return text.strip()
    
    def _detect_content_type(self, response: str) -> str:
        """Detecta o tipo de conte√∫do da resposta"""
        # Padr√µes para listas numeradas (ap√≥s convers√£o)
        if re.search(r'\d+\.\s+', response):
            return "structured_list"
        
        # Padr√µes para explica√ß√µes
        if any(word in response.lower() for word in ["porque", "pois", "devido", "explicando"]):
            return "explanation"
        
        # Padr√µes para conversa√ß√£o
        if len(response) < 300 and "?" in response:
            return "conversation"
        
        return "generic"
    
    def _format_structured_list(self, response: str) -> List[str]:
        """
        Formata listas estruturadas (como planos, op√ß√µes, etc)
        ‚úÖ CORRIGIDO: Sem markdown, apenas WhatsApp nativo
        """
        messages = []
        
        # Extrai introdu√ß√£o se houver
        intro_match = re.match(r'^(.*?)(?=\d+\.)', response, re.DOTALL)
        if intro_match and intro_match.group(1).strip():
            intro = intro_match.group(1).strip()
            if self.config.use_emojis:
                intro = "‚ú® " + intro
            messages.append(self._truncate(intro))
        
        # Processa itens da lista
        items = re.findall(r'(\d+\..*?)(?=\d+\.|$)', response, re.DOTALL)
        
        for item in items:
            # Remove quebras de linha excessivas
            item = re.sub(r'\n+', ' ', item.strip())
            
            # Divide item longo se necess√°rio
            if len(item) > self.config.max_chars:
                parts = self._split_long_item(item)
                messages.extend(parts)
            else:
                if self.config.use_emojis:
                    item = self._add_item_emoji(item)
                messages.append(item)
        
        # Adiciona mensagem de fechamento
        if messages and not any(p in messages[-1].lower() for p in ["avisar", "perguntar", "mais"]):
            closing = "Precisa de mais detalhes sobre alguma op√ß√£o?"
            if self.config.use_emojis:
                closing = "üí¨ " + closing
            messages.append(closing)
        elif not messages:
            fallback = "Pode me contar mais sobre o que voc√™ precisa?"
            if self.config.use_emojis:
                fallback = "üí¨ " + fallback
            messages.append(fallback)
                    
        return messages
    
    def _format_explanation(self, response: str) -> List[str]:
        """Formata explica√ß√µes em chunks naturais"""
        messages = []
        
        # Divide por frases
        sentences = re.split(r'(?<=[.!?])\s+', response)
        
        current_message = ""
        for sentence in sentences:
            # Se adicionar a frase exceder o limite, cria nova mensagem
            if len(current_message) + len(sentence) > self.config.max_chars:
                if current_message:
                    messages.append(current_message.strip())
                current_message = sentence
            else:
                current_message += " " + sentence if current_message else sentence
        
        # Adiciona √∫ltima mensagem
        if current_message:
            messages.append(current_message.strip())
        
        return messages if messages else [response[:self.config.max_chars]]
    
    def _format_conversation(self, response: str) -> List[str]:
        """Formata respostas conversacionais curtas"""
        if len(response) <= self.config.max_chars:
            return [response]
        
        return self._format_generic(response)
    
    def _format_generic(self, response: str) -> List[str]:
        """Formata√ß√£o gen√©rica para qualquer conte√∫do"""
        messages = []
        
        # Remove espa√ßos e quebras excessivas
        response = re.sub(r'\n\n+', '\n', response.strip())
        
        # Divide em par√°grafos
        paragraphs = response.split('\n')
        
        for para in paragraphs:
            if not para.strip():
                continue
            
            # Se o par√°grafo √© maior que o limite
            if len(para) > self.config.max_chars:
                parts = self._smart_split(para)
                messages.extend(parts)
            else:
                messages.append(para.strip())
        
        return messages if messages else [response[:self.config.max_chars]]
    
    def _smart_split(self, text: str) -> List[str]:
        """Divis√£o inteligente respeitando pontua√ß√£o e contexto"""
        messages = []
        
        # Pontos de quebra preferenciais
        break_points = [
            (r'(?<=[.!?])\s+', True),   # Ap√≥s pontua√ß√£o forte
            (r'(?<=[,;:])\s+', True),   # Ap√≥s pontua√ß√£o fraca
            (r'(?<=\))\s+', True),      # Ap√≥s par√™nteses
            (r'\s+(?=mas|por√©m|entretanto|todavia)', True),  # Antes de conjun√ß√µes
            (r'\s+', False),            # Qualquer espa√ßo
        ]
        
        remaining = text
        while remaining:
            if len(remaining) <= self.config.max_chars:
                messages.append(remaining.strip())
                break
            
            # Tenta cada ponto de quebra
            split_made = False
            for pattern, keep_delimiter in break_points:
                matches = list(re.finditer(pattern, remaining[:self.config.max_chars]))
                if matches:
                    last_match = matches[-1]
                    cut_point = last_match.end() if keep_delimiter else last_match.start()
                    
                    messages.append(remaining[:cut_point].strip())
                    remaining = remaining[cut_point:].strip()
                    split_made = True
                    break
            
            # Se n√£o encontrou ponto de quebra, for√ßa no limite
            if not split_made:
                messages.append(remaining[:self.config.max_chars].strip())
                remaining = remaining[self.config.max_chars:].strip()
        
        return messages
    
    def _split_long_item(self, item: str) -> List[str]:
        """Divide um item longo de lista em m√∫ltiplas mensagens"""
        # Extrai n√∫mero do item
        number_match = re.match(r'(\d+\.)', item)
        number = number_match.group(1) if number_match else ""
        content = item[len(number):].strip() if number else item
        
        # Divide o conte√∫do
        parts = self._smart_split(content)
        
        # Adiciona n√∫mero apenas na primeira parte
        if parts:
            parts[0] = f"{number} {parts[0]}" if number else parts[0]
        
        return parts
    
    def _add_item_emoji(self, item: str) -> str:
        """Adiciona emoji apropriado ao item"""
        emoji_map = {
            "essencial": "‚≠ê",
            "profissional": "üöÄ", 
            "premium": "üíé",
            "enterprise": "üè¢",
            "b√°sico": "üì±",
            "avan√ßado": "‚ö°",
            "completo": "üéØ"
        }
        
        item_lower = item.lower()
        for keyword, emoji in emoji_map.items():
            if keyword in item_lower:
                # Adiciona emoji ap√≥s o n√∫mero
                return re.sub(r'^(\d+\.)', rf'\1 {emoji}', item)
        
        return item
    
    def _truncate(self, text: str) -> str:
        """Trunca texto no limite de caracteres"""
        if len(text) <= self.config.max_chars:
            return text
        
        # Tenta cortar em ponto de pontua√ß√£o
        truncated = text[:self.config.max_chars]
        
        # Procura √∫ltimo ponto de pontua√ß√£o
        for punct in ['. ', '! ', '? ', ', ', ' ']:
            last_punct = truncated.rfind(punct)
            if last_punct > self.config.max_chars * 0.7:  # Pelo menos 70% do limite
                return truncated[:last_punct + 1].strip()
        
        # Se n√£o encontrou, corta no √∫ltimo espa√ßo
        last_space = truncated.rfind(' ')
        if last_space > 0:
            return truncated[:last_space] + "..."
        
        return truncated + "..."


def create_formatter(tenant_config: Dict[str, Any]) -> MessageFormatter:
    """Factory para criar formatter com config do tenant"""
    formatter_config = FormatterConfig.from_dict(
        tenant_config.get("formatter", {})
    )
    return MessageFormatter(formatter_config)